<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>배드민턴 코트 배정 시스템</title>
    <style>
        /* --- 기본 스타일 --- */
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: #f4f4f9;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            flex-direction: column;
        }

        .container {
            width: 100%;
            max-width: 1000px;
            margin: 0 auto;
        }

        /* --- 코트 레이아웃 (이미지 상단) --- */
        .courts-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .court {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
            gap: 5px; /* 이게 '십자' 모양을 만듭니다 */
            background-color: #333; /* 십자선 색상 */
            border: 12px solid #e0e0e0; /* 바깥 회색 프레임 */
            border-radius: 5px;
            padding: 5px;
        }

        .player-slot {
            background-color: #f0f0f0;
            color: #aaa;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 80px;
            font-size: 0.9rem;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.2s;
            user-select: none; /* 텍스트 선택 방지 */
        }

        .player-slot.filled {
            background-color: #fbc2c2; /* 이미지의 핑크색 */
            color: #c93a3a;
            font-weight: bold;
        }

        /* --- 대기 명단 (이미지 하단) --- */
        .waitlist-section {
            background-color: #f2e8e8; /* 이미지의 옅은 갈색/핑크색 배경 */
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        }

        .waitlist-section h3 {
            text-align: left;
            margin-top: 0;
            margin-bottom: 20px;
            font-size: 1.5rem;
            color: #333;
        }
        
        /* --- 대기자 추가 폼 (작동을 위해 추가) --- */
        .add-player-form {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .add-player-form input[type="text"] {
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 1rem;
        }
        
        .add-player-form button {
            padding: 10px 20px;
            background-color: #5a8d5a;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
        }

        /* --- 대기 명단 그리드 --- */
        .waiting-list {
            display: grid;
            grid-template-columns: repeat(3, 1fr); /* 이미지와 같이 3열 */
            gap: 10px;
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .wait-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: #fdf6f6;
            padding: 10px 15px;
            border-radius: 5px;
            border: 1px solid #e0c8c8;
        }

        .wait-item .player-name {
            font-weight: bold;
            font-size: 1.1rem;
            color: #333;
        }
        
        .wait-item .wait-time {
            background: #eee;
            padding: 5px 8px;
            border-radius: 3px;
            font-size: 0.9rem;
            font-weight: bold;
            color: #555;
            min-width: 60px;
            text-align: right;
        }
        
        .wait-item .assign-btn {
            padding: 5px 10px;
            font-size: 0.8rem;
            background-color: #4a76c2;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            margin-left: 5px;
        }
        
        .wait-item .assign-btn:hover {
            background-color: #3a5d9a;
        }

    </style>
</head>
<body>

    <div class="container">
        
        <div class="courts-container">
            <div class="court" id="court-1">
                <div class="player-slot" data-court="1" data-slot="1">플레이어 1</div>
                <div class="player-slot" data-court="1" data-slot="2">플레이어 2</div>
                <div class="player-slot" data-court="1" data-slot="3">플레이어 3</div>
                <div class="player-slot" data-court="1" data-slot="4">플레이어 4</div>
            </div>
            <div class="court" id="court-2">
                <div class="player-slot" data-court="2" data-slot="1">플레이어 1</div>
                <div class="player-slot" data-court="2" data-slot="2">플레이어 2</div>
                <div class="player-slot" data-court="2" data-slot="3">플레이어 3</div>
                <div class="player-slot" data-court="2" data-slot="4">플레이어 4</div>
            </div>
            <div class="court" id="court-3">
                <div class="player-slot" data-court="3" data-slot="1">플레이어 1</div>
                <div class="player-slot" data-court="3" data-slot="2">플레이어 2</div>
                <div class="player-slot" data-court="3" data-slot="3">플레이어 3</div>
                <div class="player-slot" data-court="3" data-slot="4">플레이어 4</div>
            </div>
            <div class="court" id="court-4">
                <div class="player-slot" data-court="4" data-slot="1">플레이어 1</div>
                <div class="player-slot" data-court="4" data-slot="2">플레이어 2</div>
                <div class="player-slot" data-court="4" data-slot="3">플레이어 3</div>
                <div class="player-slot" data-court="4" data-slot="4">플레이어 4</div>
            </div>
        </div>
        
        <div class="waitlist-section">
            <h3>대기 명단 & 대기 시간 표시</h3>
            
            <div class="add-player-form">
                <input type="text" id="playerNameInput" placeholder="대기자 이름 입력...">
                <button id="addPlayerButton">대기열 추가</button>
            </div>
            
            <ul class="waiting-list" id="waitingList">
                </ul>
        </div>

    </div>

    <script>
        // --- JavaScript (애플리케이션 동작 로직) ---

        // 1. 필요한 HTML 요소들을 가져옵니다.
        const playerNameInput = document.getElementById('playerNameInput');
        const addPlayerButton = document.getElementById('addPlayerButton');
        const waitingListElement = document.getElementById('waitingList');
        const playerSlots = document.querySelectorAll('.player-slot');

        // 2. 대기열 데이터를 저장할 배열
        let waitingQueue = [];
        let nextId = 0;

        // 3. (함수) 대기열 목록을 화면에 렌더링 (업데이트)
        function renderWaitingList() {
            // 목록을 일단 비웁니다.
            waitingListElement.innerHTML = '';
            
            const now = Date.now();

            waitingQueue.forEach(player => {
                // 대기 시간 계산 (초)
                const elapsedSeconds = Math.floor((now - player.startTime) / 1000);
                const minutes = Math.floor(elapsedSeconds / 60);
                const seconds = elapsedSeconds % 60;
                
                // MM:SS 형식으로 포맷
                const formattedTime = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}초`;

                // 새 <li> 항목 생성
                const li = document.createElement('li');
                li.className = 'wait-item';
                li.innerHTML = `
                    <span class="player-name">${player.name}</span>
                    <span class="wait-time">${formattedTime}</span>
                    <button class="assign-btn" data-player-id="${player.id}">배정</button>
                `;
                
                // 목록에 추가
                waitingListElement.appendChild(li);
            });
        }

        // 4. (함수) 대기열에 새 플레이어 추가
        function addPlayerToQueue() {
            const name = playerNameInput.value.trim(); // 공백 제거
            if (name === "") {
                alert("플레이어 이름을 입력하세요!");
                return;
            }

            // 새 플레이어 객체 생성
            const newPlayer = {
                id: nextId++,
                name: name,
                startTime: Date.now()
            };
            
            // 대기열 배열에 추가
            waitingQueue.push(newPlayer);
            
            // 입력창 비우기
            playerNameInput.value = '';
            
            // 화면 갱신
            renderWaitingList();
        }
        
        // 5. (함수) 플레이어를 빈 코트 슬롯에 배정
        function assignPlayer(playerId) {
            // 1. 빈 슬롯 찾기
            let emptySlot = null;
            for (const slot of playerSlots) {
                if (!slot.classList.contains('filled')) {
                    emptySlot = slot;
                    break; // 첫 번째 빈 슬롯을 찾으면 중단
                }
            }
            
            if (!emptySlot) {
                alert("모든 코트가 꽉 찼습니다!");
                return;
            }

            // 2. 대기열에서 플레이어 찾기
            const playerIndex = waitingQueue.findIndex(p => p.id == playerId);
            if (playerIndex === -1) return; // 이미 배정된 경우

            const player = waitingQueue[playerIndex];
            
            // 3. 슬롯에 플레이어 정보 채우기
            emptySlot.classList.add('filled');
            emptySlot.textContent = player.name;
            // 나중에 제거할 수 있도록 플레이어 이름을 데이터로 저장
            emptySlot.dataset.playerName = player.name; 

            // 4. 대기열에서 플레이어 제거
            waitingQueue.splice(playerIndex, 1);
            
            // 5. 화면 갱신
            renderWaitingList();
        }
        
        // 6. (함수) 코트 슬롯 비우기 (클릭 시) -> [수정됨: 대기열 복귀 기능 추가]
        function clearSlot(event) {
            const slot = event.target;
            
            // 채워진 슬롯만 비울 수 있음
            if (slot.classList.contains('filled')) {
                const playerName = slot.dataset.playerName;
                
                // [수정] 확인 메시지 변경
                if (confirm(`'${playerName}'님의 배정을 취소하고 대기열로 돌려보내시겠습니까?`)) {
                    
                    // --- [추가된 로직 시작] ---
                    // 1. 대기열에 다시 추가할 플레이어 객체 생성
                    const reQueuedPlayer = {
                        id: nextId++,
                        name: playerName,
                        startTime: Date.now() // 새 대기 시간으로 시작
                    };
                    
                    // 2. 대기열 배열의 맨 뒤에 추가
                    waitingQueue.push(reQueuedPlayer);
                    // --- [추가된 로직 끝] ---

                    // 3. 슬롯 비우기 (기존 로직)
                    slot.classList.remove('filled');
                    slot.textContent = `플레이어 ${slot.dataset.slot}`; // 원래 텍스트로 복원
                    delete slot.dataset.playerName;
                    
                    // 4. [추가] 대기열 목록 화면 갱신
                    renderWaitingList(); 
                }
            }
        }

        // --- 이벤트 리스너 연결 ---

        // '대기열 추가' 버튼 클릭 시
        addPlayerButton.addEventListener('click', addPlayerToQueue);
        // 엔터 키로도 추가 가능
        playerNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addPlayerToQueue();
            }
        });

        // '배정' 버튼 클릭 시 (이벤트 위임 사용)
        waitingListElement.addEventListener('click', function(e) {
            if (e.target.classList.contains('assign-btn')) {
                const playerId = e.target.dataset.playerId;
                assignPlayer(playerId);
            }
        });
        
        // 코트 슬롯 클릭 시 (비우기 기능)
        playerSlots.forEach(slot => {
            slot.addEventListener('click', clearSlot);
        });

        // 1초마다 타이머 갱신
        setInterval(renderWaitingList, 1000);

        // (초기 로드) 이미지와 비슷하게 보이도록 예시 데이터 추가
        waitingQueue = [
            { id: nextId++, name: '박성준', startTime: Date.now() - 00*00*1000 - 00*1000 },
            { id: nextId++, name: '강준시', startTime: Date.now() - 00*00*1000 - 00*1000 },
            { id: nextId++, name: '고도한', startTime: Date.now() - 00*00*1000 - 00*1000 },
            { id: nextId++, name: '데크너', startTime: Date.now() - 00*00*1000 - 00*1000 },
            { id: nextId++, name: '다이즈', startTime: Date.now() - 00*00*1000 - 00*1000 },
            { id: nextId++, name: '유현민', startTime: Date.now() - 00*00*1000 - 00*1000 },
            { id: nextId++, name: '데프너', startTime: Date.now() - 00*00*1000 - 00*1000 },
            { id: nextId++, name: '가이비', startTime: Date.now() - 00*00*1000 - 00*1000 },
            { id: nextId++, name: '김자양', startTime: Date.now() - 00*00*1000 - 00*1000 },
        ];
        renderWaitingList();

    </script>
</body>
</html>
